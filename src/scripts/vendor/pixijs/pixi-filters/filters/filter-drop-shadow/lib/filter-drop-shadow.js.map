{"version":3,"file":"filter-drop-shadow.js","sources":["../src/DropShadowFilter.js"],"sourcesContent":["import {KawaseBlurFilter} from '@pixi/filter-kawase-blur';\nimport {vertex} from '@tools/fragments';\nimport fragment from './dropshadow.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * Drop shadow filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/drop-shadow.png)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {object} [options] Filter options\n * @param {number} [options.rotation=45] The angle of the shadow in degrees.\n * @param {number} [options.distance=5] Distance of shadow\n * @param {number} [options.color=0x000000] Color of the shadow\n * @param {number} [options.alpha=0.5] Alpha of the shadow\n * @param {number} [options.shadowOnly=false] Whether render shadow only\n * @param {number} [options.blur=2] - Sets the strength of the Blur properties simultaneously\n * @param {number} [options.quality=3] - The quality of the Blur filter.\n * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution of the Blur filter.\n */\nexport default class DropShadowFilter extends PIXI.Filter {\n    constructor(options) {\n\n        // Fallback support for ctor: (rotation, distance, blur, color, alpha)\n        if (options && options.constructor !== Object) {\n            // eslint-disable-next-line no-console\n            console.warn('DropShadowFilter now uses options instead of (rotation, distance, blur, color, alpha)');\n            options = { rotation: options };\n            if (arguments[1] !== undefined) {\n                options.distance = arguments[1];\n            }\n            if (arguments[2] !== undefined) {\n                options.blur = arguments[2];\n            }\n            if (arguments[3] !== undefined) {\n                options.color = arguments[3];\n            }\n            if (arguments[4] !== undefined) {\n                options.alpha = arguments[4];\n            }\n        }\n\n        options = Object.assign({\n            rotation: 45,\n            distance: 5,\n            color: 0x000000,\n            alpha: 0.5,\n            shadowOnly: false,\n            kernels: null,\n            blur: 2,\n            quality: 3,\n            pixelSize: 1,\n            resolution: PIXI.settings.RESOLUTION,\n        }, options);\n\n        super();\n\n        const { kernels, blur, quality, pixelSize, resolution } = options;\n\n        this._tintFilter = new PIXI.Filter(vertex, fragment);\n        this._tintFilter.uniforms.color = new Float32Array(4);\n        this._tintFilter.resolution = resolution;\n        this._blurFilter = kernels ?\n            new KawaseBlurFilter(kernels) :\n            new KawaseBlurFilter(blur, quality);\n\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n\n        this.targetTransform = new PIXI.Matrix();\n\n        const { shadowOnly, rotation, distance, alpha, color } = options;\n\n        this.shadowOnly = shadowOnly;\n        this.rotation = rotation;\n        this.distance = distance;\n        this.alpha = alpha;\n        this.color = color;\n\n        this._updatePadding();\n    }\n\n    apply(filterManager, input, output, clear) {\n        const target = filterManager.getRenderTarget();\n\n        target.transform = this.targetTransform;\n        this._tintFilter.apply(filterManager, input, target, true);\n        target.transform = null;\n\n        this._blurFilter.apply(filterManager, target, output);\n\n        if (this.shadowOnly !== true) {\n            filterManager.applyFilter(this, input, output, clear);\n        }\n\n        filterManager.returnRenderTarget(target);\n    }\n\n    /**\n     * Recalculate the proper padding amount.\n     * @private\n     */\n    _updatePadding() {\n        this.padding = this.distance + (this.blur * 2);\n    }\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     */\n    _updateTargetTransform() {\n        this.targetTransform.tx = this.distance * Math.cos(this.angle);\n        this.targetTransform.ty = this.distance * Math.sin(this.angle);\n    }\n\n    /**\n     * The resolution of the filter.\n     *\n     * @member {number}\n     * @default PIXI.settings.RESOLUTION\n     */\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(value) {\n        this._resolution = value;\n\n        if (this._tintFilter) {\n            this._tintFilter.resolution = value;\n        }\n        if (this._blurFilter) {\n            this._blurFilter.resolution = value;\n        }\n    }\n\n    /**\n     * Distance offset of the shadow\n     * @member {number}\n     * @default 5\n     */\n    get distance() {\n        return this._distance;\n    }\n    set distance(value) {\n        this._distance = value;\n        this._updatePadding();\n        this._updateTargetTransform();\n    }\n\n    /**\n     * The angle of the shadow in degrees\n     * @member {number}\n     * @default 2\n     */\n    get rotation() {\n        return this.angle / PIXI.DEG_TO_RAD;\n    }\n    set rotation(value) {\n        this.angle = value * PIXI.DEG_TO_RAD;\n        this._updateTargetTransform();\n    }\n\n    /**\n     * The alpha of the shadow\n     * @member {number}\n     * @default 1\n     */\n    get alpha() {\n        return this._tintFilter.uniforms.alpha;\n    }\n    set alpha(value) {\n        this._tintFilter.uniforms.alpha = value;\n    }\n\n    /**\n     * The color of the shadow.\n     * @member {number}\n     * @default 0x000000\n     */\n    get color() {\n        return PIXI.utils.rgb2hex(this._tintFilter.uniforms.color);\n    }\n    set color(value) {\n        PIXI.utils.hex2rgb(value, this._tintFilter.uniforms.color);\n    }\n\n    /**\n     * Sets the kernels of the Blur Filter\n     *\n     * @member {number[]}\n     */\n    get kernels() {\n        return this._blurFilter.kernels;\n    }\n    set kernels(value) {\n        this._blurFilter.kernels = value;\n    }\n\n    /**\n     * The blur of the shadow\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this._blurFilter.blur;\n    }\n    set blur(value) {\n        this._blurFilter.blur = value;\n        this._updatePadding();\n    }\n\n    /**\n     * Sets the quality of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality() {\n        return this._blurFilter.quality;\n    }\n    set quality(value) {\n        this._blurFilter.quality = value;\n    }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    get pixelSize() {\n        return this._blurFilter.pixelSize;\n    }\n    set pixelSize(value) {\n        this._blurFilter.pixelSize = value;\n    }\n}\n"],"names":["DropShadowFilter","options","constructor","Object","console","warn","rotation","undefined","arguments","distance","blur","color","alpha","assign","shadowOnly","kernels","quality","pixelSize","resolution","PIXI.settings","RESOLUTION","super","this","_tintFilter","PIXI.Filter","vertex","fragment","uniforms","Float32Array","_blurFilter","KawaseBlurFilter","targetTransform","PIXI.Matrix","_updatePadding","apply","filterManager","input","output","clear","const","target","getRenderTarget","transform","applyFilter","returnRenderTarget","padding","_updateTargetTransform","tx","Math","cos","angle","ty","sin","prototypeAccessors","_resolution","value","_distance","PIXI.DEG_TO_RAD","PIXI.utils","rgb2hex","hex2rgb"],"mappings":"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"}