{"version":3,"file":"filter-multi-color-replace.js","sources":["../src/MultiColorReplaceFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './multi-color-replace.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * Filter for replacing a color with another color. Similar to ColorReplaceFilter, but support multiple\n * colors.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/multi-color-replace.png)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {Array<Array>} replacements - The collection of replacement items. Each item is color-pair (an array length is 2).\n *                       In the pair, the first value is original color , the second value is target color.\n * @param {number} [epsilon=0.05] - Tolerance of the floating-point comparison between colors\n *                                  (lower = more exact, higher = more inclusive)\n * @param {number} [maxColors] - The maximum number of replacements filter is able to use. Because the\n *                               fragment is only compiled once, this cannot be changed after construction.\n *                               If omitted, the default value is the length of `replacements`.\n *\n * @example\n *  // replaces pure red with pure blue, and replaces pure green with pure white\n *  someSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [0xFF0000, 0x0000FF],\n *      [0x00FF00, 0xFFFFFF]\n *    ],\n *    0.001\n *  )];\n *\n *  You also could use [R, G, B] as the color\n *  someOtherSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [ [1,0,0], [0,0,1] ],\n *      [ [0,1,0], [1,1,1] ]\n *    ],\n *    0.001\n *  )];\n *\n */\nexport default class MultiColorReplaceFilter extends PIXI.Filter {\n    constructor(replacements, epsilon = 0.05, maxColors = null) {\n        maxColors = maxColors || replacements.length;\n\n        super(vertex, fragment.replace(/%maxColors%/g, maxColors));\n\n        this.epsilon = epsilon;\n        this._maxColors = maxColors;\n        this._replacements = null;\n        this.uniforms.originalColors = new Float32Array(maxColors * 3);\n        this.uniforms.targetColors = new Float32Array(maxColors * 3);\n        this.replacements = replacements;\n    }\n\n    /**\n     * The source and target colors for replacement. See constructor for information on the format.\n     *\n     * @member {Array<Array>}\n     */\n    set replacements(replacements) {\n        const originals = this.uniforms.originalColors;\n        const targets = this.uniforms.targetColors;\n        const colorCount = replacements.length;\n\n        if (colorCount > this._maxColors) {\n            throw `Length of replacements (${colorCount}) exceeds the maximum colors length (${this._maxColors})`;\n        }\n\n        // Fill with negative values\n        originals[colorCount * 3] = -1;\n\n        for (let i = 0; i < colorCount; i++) {\n            const pair = replacements[i];\n\n            // for original colors\n            let color = pair[0];\n            if (typeof color === 'number') {\n                color = PIXI.utils.hex2rgb(color);\n            }\n            else {\n                pair[0] = PIXI.utils.rgb2hex(color);\n            }\n\n            originals[i * 3] = color[0];\n            originals[(i * 3) + 1] = color[1];\n            originals[(i * 3) + 2] = color[2];\n\n            // for target colors\n            let targetColor = pair[1];\n            if (typeof targetColor === 'number') {\n                targetColor = PIXI.utils.hex2rgb(targetColor);\n            }\n            else {\n                pair[1] = PIXI.utils.rgb2hex(targetColor);\n            }\n\n            targets[i * 3] = targetColor[0];\n            targets[(i * 3) + 1] = targetColor[1];\n            targets[(i * 3) + 2] = targetColor[2];\n        }\n\n        this._replacements = replacements;\n    }\n    get replacements() {\n        return this._replacements;\n    }\n\n    /**\n     * Should be called after changing any of the contents of the replacements.\n     * This is a convenience method for resetting the `replacements`.\n     */\n    refresh() {\n        this.replacements = this._replacements;\n    }\n\n    /**\n     * The maximum number of color replacements supported by this filter. Can be changed\n     * _only_ during construction.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get maxColors() {\n        return this._maxColors;\n    }\n\n    /**\n     * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     *\n     * @member {number}\n     * @default 0.05\n     */\n    set epsilon(value) {\n        this.uniforms.epsilon = value;\n    }\n    get epsilon() {\n        return this.uniforms.epsilon;\n    }\n}\n"],"names":["MultiColorReplaceFilter","replacements","epsilon","maxColors","length","super","this","vertex","fragment","replace","_maxColors","_replacements","uniforms","originalColors","Float32Array","targetColors","prototypeAccessors","const","originals","targets","colorCount","let","i","pair","color","PIXI.utils","hex2rgb","rgb2hex","targetColor","refresh","value","PIXI.Filter"],"mappings":";;;;;;;2zCAuCqBA,cAA4C,WACjDC,EAAcC,EAAgBC,kBAAN,oBAAkB,MAClDA,EAAYA,GAAaF,EAAaG,OAEtCC,OAAMC,KAAAC,EAAQC,EAASC,QAAQ,eAAgBN,IAE/CG,KAAKJ,QAAUA,EACfI,KAAKI,WAAaP,EAClBG,KAAKK,cAAgB,KACrBL,KAAKM,SAASC,eAAiB,IAAIC,aAAyB,EAAZX,GAChDG,KAAKM,SAASG,aAAe,IAAID,aAAyB,EAAZX,GAC9CG,KAAKL,aAAeA,6LAQxBe,EAAAf,0BAAiBA,GACbgB,IAAMC,EAAYZ,KAAKM,SAASC,eAC1BM,EAAUb,KAAKM,SAASG,aACxBK,EAAanB,EAAaG,OAEhC,GAAIgB,EAAad,KAAKI,WAClB,KAAM,2BAA2BU,0CAAkDd,KAAe,eAItGY,EAAuB,EAAbE,IAAmB,EAE7B,IAAKC,IAAIC,EAAI,EAAGA,EAAIF,EAAYE,IAAK,CACjCL,IAAMM,EAAOtB,EAAaqB,GAGtBE,EAAQD,EAAK,GACI,iBAAVC,EACPA,EAAQC,QAAWC,QAAQF,GAG3BD,EAAK,GAAKE,QAAWE,QAAQH,GAGjCN,EAAc,EAAJI,GAASE,EAAM,GACzBN,EAAe,EAAJI,EAAS,GAAKE,EAAM,GAC/BN,EAAe,EAAJI,EAAS,GAAKE,EAAM,GAG/BH,IAAIO,EAAcL,EAAK,GACI,iBAAhBK,EACPA,EAAcH,QAAWC,QAAQE,GAGjCL,EAAK,GAAKE,QAAWE,QAAQC,GAGjCT,EAAY,EAAJG,GAASM,EAAY,GAC7BT,EAAa,EAAJG,EAAS,GAAKM,EAAY,GACnCT,EAAa,EAAJG,EAAS,GAAKM,EAAY,GAGvCtB,KAAKK,cAAgBV,GAEzBe,EAAAf,4BACI,OAAOK,KAAKK,eAOhBX,YAAA6B,mBACIvB,KAAKL,aAAeK,KAAKK,eAU7BK,EAAAb,yBACI,OAAOG,KAAKI,YAShBM,EAAAd,qBAAY4B,GACRxB,KAAKM,SAASV,QAAU4B,GAE5Bd,EAAAd,uBACI,OAAOI,KAAKM,SAASV,mDAhGwB6B"}