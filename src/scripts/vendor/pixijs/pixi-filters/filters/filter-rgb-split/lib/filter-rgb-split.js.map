{"version":3,"file":"filter-rgb-split.js","sources":["../src/RGBSplitFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './rgb-split.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * An RGB Split Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/rgb.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {PIXI.Point} [red=[-10,0]] Red channel offset\n * @param {PIXI.Point} [green=[0, 10]] Green channel offset\n * @param {PIXI.Point} [blue=[0, 0]] Blue channel offset\n */\nexport default class RGBSplitFilter extends PIXI.Filter {\n    constructor(red = [-10, 0], green = [0, 10], blue = [0, 0]) {\n        super(vertex, fragment);\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n    }\n\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get red() {\n        return this.uniforms.red;\n    }\n    set red(value) {\n        this.uniforms.red = value;\n    }\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get green() {\n        return this.uniforms.green;\n    }\n    set green(value) {\n        this.uniforms.green = value;\n    }\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get blue() {\n        return this.uniforms.blue;\n    }\n    set blue(value) {\n        this.uniforms.blue = value;\n    }\n}\n"],"names":["RGBSplitFilter","red","green","blue","super","this","vertex","fragment","prototypeAccessors","uniforms","value","PIXI.Filter"],"mappings":";;;;;;;q/BAeqBA,cAAmC,WACxCC,EAAgBC,EAAiBC,oBAAzB,GAAI,oBAAa,EAAG,qBAAa,EAAG,IACpDC,OAAMC,KAAAC,EAAQC,GACdF,KAAKJ,IAAMA,EACXI,KAAKH,MAAQA,EACbG,KAAKF,KAAOA,6KAQhBK,EAAAP,mBACI,OAAOI,KAAKI,SAASR,KAEzBO,EAAAP,iBAAQS,GACJL,KAAKI,SAASR,IAAMS,GAQxBF,EAAAN,qBACI,OAAOG,KAAKI,SAASP,OAEzBM,EAAAN,mBAAUQ,GACNL,KAAKI,SAASP,MAAQQ,GAQ1BF,EAAAL,oBACI,OAAOE,KAAKI,SAASN,MAEzBK,EAAAL,kBAASO,GACLL,KAAKI,SAASN,KAAOO,6CAzCeC"}