{"version":3,"file":"filter-godray.es.js","sources":["../src/GodrayFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport perlin from './perlin.frag';\nimport fragment from './gorday.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n* GordayFilter, {@link https://codepen.io/alaingalvan originally} by Alain Galvan\n*\n*\n*\n* ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/godray.gif)\n* @class\n* @extends PIXI.Filter\n* @memberof PIXI.filters\n*\n* @example\n*  displayObject.filters = [new GodrayFilter()];\n* @param {object} [options] Filter options\n* @param {number} [options.angle=30] Angle/Light-source of the rays.\n* @param {number} [options.gain=0.5] General intensity of the effect.\n* @param {number} [options.lacunrity=2.5] The density of the fractal noise.\n* @param {boolean} [options.parallel=true] `true` to use `angle`, `false` to use `center`\n* @param {number} [options.time=0] The current time position.\n* @param {PIXI.Point|number[]} [options.center=[0,0]] Focal point for non-parallel rays,\n*        to use this `parallel` must be set to `false`.\n*/\nexport default class GodrayFilter extends PIXI.Filter {\n\n    constructor(options) {\n        super(vertex, fragment.replace('${perlin}', perlin));\n\n        this.uniforms.dimensions = new Float32Array(2);\n\n        // Fallback support for ctor: (angle, gain, lacunarity, time)\n        if (typeof options === 'number') {\n            // eslint-disable-next-line no-console\n            console.warn('GodrayFilter now uses options instead of (angle, gain, lacunarity, time)');\n            options = { angle: options };\n            if (arguments[1] !== undefined) {\n                options.gain = arguments[1];\n            }\n            if (arguments[2] !== undefined) {\n                options.lacunarity = arguments[2];\n            }\n            if (arguments[3] !== undefined) {\n                options.time = arguments[3];\n            }\n        }\n\n        options = Object.assign({\n            angle: 30,\n            gain: 0.5,\n            lacunarity: 2.5,\n            time: 0,\n            parallel: true,\n            center: [0, 0],\n        }, options);\n\n        this._angleLight = new PIXI.Point();\n        this.angle = options.angle;\n        this.gain = options.gain;\n        this.lacunarity = options.lacunarity;\n\n        /**\n         * `true` if light rays are parallel (uses angle),\n         * `false` to use the focal `center` point\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.parallel = options.parallel;\n\n        /**\n         * The position of the emitting point for light rays\n         * only used if `parallel` is set to `false`.\n         *\n         * @member {PIXI.Point|number[]}\n         * @default [0, 0]\n         */\n        this.center = options.center;\n\n        /**\n         * The current time.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.time = options.time;\n    }\n\n    /**\n     * Applies the filter.\n     * @private\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     */\n    apply(filterManager, input, output, clear) {\n        const {width, height} = input.sourceFrame;\n\n        this.uniforms.light = this.parallel ? this._angleLight : this.center;\n\n        this.uniforms.parallel = this.parallel;\n        this.uniforms.dimensions[0] = width;\n        this.uniforms.dimensions[1] = height;\n        this.uniforms.aspect = height / width;\n        this.uniforms.time = this.time;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * The angle/light-source of the rays in degrees. For instance, a value of 0 is vertical rays,\n     *     values of 90 or -90 produce horizontal rays.\n     * @member {number}\n     * @default 30\n     */\n    get angle() {\n        return this._angle;\n    }\n    set angle(value) {\n        this._angle = value;\n\n        const radians = value * PIXI.DEG_TO_RAD;\n\n        this._angleLight.x = Math.cos(radians);\n        this._angleLight.y = Math.sin(radians);\n    }\n\n    /**\n     * General intensity of the effect. A value closer to 1 will produce a more intense effect,\n     * where a value closer to 0 will produce a subtler effect.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    get gain() {\n        return this.uniforms.gain;\n    }\n    set gain(value) {\n        this.uniforms.gain = value;\n    }\n\n    /**\n     * The density of the fractal noise. A higher amount produces more rays and a smaller amound\n     * produces fewer waves.\n     *\n     * @member {number}\n     * @default 2.5\n     */\n    get lacunarity() {\n        return this.uniforms.lacunarity;\n    }\n    set lacunarity(value) {\n        this.uniforms.lacunarity = value;\n    }\n}\n\n"],"names":["GodrayFilter","options","super","vertex","fragment","replace","perlin","this","uniforms","dimensions","Float32Array","console","warn","angle","undefined","arguments","gain","lacunarity","time","Object","assign","parallel","center","_angleLight","PIXI.Point","apply","filterManager","input","output","clear","sourceFrame","light","width","height","aspect","applyFilter","prototypeAccessors","_angle","value","const","radians","PIXI.DEG_TO_RAD","x","Math","cos","y","sin","PIXI.Filter"],"mappings":";;;;;;;4oJA0BqBA,yBAEjB,WAAYC,GACRC,YAAMC,OAAQC,SAASC,QAAQ,YAAaC,SAE5CC,KAAKC,SAASC,WAAa,IAAIC,aAAa,GAGrB,iBAAZT,IAEPU,QAAQC,KAAK,4EACbX,GAAYY,MAAOZ,QACEa,IAAjBC,UAAU,KACVd,EAAQe,KAAOD,UAAU,SAERD,IAAjBC,UAAU,KACVd,EAAQgB,WAAaF,UAAU,SAEdD,IAAjBC,UAAU,KACVd,EAAQiB,KAAOH,UAAU,KAIjCd,EAAUkB,OAAOC,QACbP,MAAO,GACPG,KAAM,GACNC,WAAY,IACZC,KAAM,EACNG,UAAU,EACVC,QAAS,EAAG,IACbrB,GAEHM,KAAKgB,YAAc,IAAIC,MACvBjB,KAAKM,MAAQZ,EAAQY,MACrBN,KAAKS,KAAOf,EAAQe,KACpBT,KAAKU,WAAahB,EAAQgB,WAS1BV,KAAKc,SAAWpB,EAAQoB,SASxBd,KAAKe,OAASrB,EAAQqB,OAQtBf,KAAKW,KAAOjB,EAAQiB,mMAUxBO,eAAMC,EAAeC,EAAOC,EAAQC,GAChC,MAAwBF,EAAMG,iCAE9BvB,KAAKC,SAASuB,MAAQxB,KAAKc,SAAWd,KAAKgB,YAAchB,KAAKe,OAE9Df,KAAKC,SAASa,SAAWd,KAAKc,SAC9Bd,KAAKC,SAASC,WAAW,GAAKuB,EAC9BzB,KAAKC,SAASC,WAAW,GAAKwB,EAC9B1B,KAAKC,SAAS0B,OAASD,EAASD,EAChCzB,KAAKC,SAASU,KAAOX,KAAKW,KAG1BQ,EAAcS,YAAY5B,KAAMoB,EAAOC,EAAQC,IASnDO,EAAIvB,qBACA,OAAON,KAAK8B,QAEhBD,EAAIvB,mBAAMyB,GACN/B,KAAK8B,OAASC,EAEdC,IAAMC,EAAUF,EAAQG,WAExBlC,KAAKgB,YAAYmB,EAAIC,KAAKC,IAAIJ,GAC9BjC,KAAKgB,YAAYsB,EAAIF,KAAKG,IAAIN,IAUlCJ,EAAIpB,oBACA,OAAOT,KAAKC,SAASQ,MAEzBoB,EAAIpB,kBAAKsB,GACL/B,KAAKC,SAASQ,KAAOsB,GAUzBF,EAAInB,0BACA,OAAOV,KAAKC,SAASS,YAEzBmB,EAAInB,wBAAWqB,GACX/B,KAAKC,SAASS,WAAaqB,6CAjIOS"}