{"version":3,"file":"filter-outline.es.js","sources":["../src/OutlineFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './outline.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * OutlineFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n * http://codepen.io/mishaa/pen/emGNRB<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/outline.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [thickness=1] The tickness of the outline. Make it 2 times more for resolution 2\n * @param {number} [color=0x000000] The color of the outline.\n * @param {number} [quality=0.1] The quality of the outline from `0` to `1`, using a higher quality\n *        setting will result in slower performance and more accuracy.\n *\n * @example\n *  someSprite.shader = new OutlineFilter(9, 0xFF0000);\n */\nexport default class OutlineFilter extends PIXI.Filter {\n\n    constructor(thickness = 1, color = 0x000000, quality = 0.1) {\n        const samples =  Math.max(\n            quality * OutlineFilter.MAX_SAMPLES,\n            OutlineFilter.MIN_SAMPLES\n        );\n        const angleStep = (Math.PI * 2 / samples).toFixed(7);\n\n        super(vertex, fragment.replace(/\\$\\{angleStep\\}/, angleStep));\n        this.uniforms.thickness = new Float32Array([0, 0]);\n\n        /**\n         * The thickness of the outline.\n         * @member {number}\n         * @default 1\n         */\n        this.thickness = thickness;\n\n        this.uniforms.outlineColor = new Float32Array([0, 0, 0, 1]);\n        this.color = color;\n\n        this.quality = quality;\n    }\n\n    apply(filterManager, input, output, clear) {\n        this.uniforms.thickness[0] = this.thickness / input.size.width;\n        this.uniforms.thickness[1] = this.thickness / input.size.height;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * The color of the glow.\n     * @member {number}\n     * @default 0x000000\n     */\n    get color() {\n        return PIXI.utils.rgb2hex(this.uniforms.outlineColor);\n    }\n    set color(value) {\n        PIXI.utils.hex2rgb(value, this.uniforms.outlineColor);\n    }\n}\n\n/**\n * The minimum number of samples for rendering outline.\n * @static\n * @member {number} MIN_SAMPLES\n * @memberof PIXI.filters.OutlineFilter\n * @default 1\n */\nOutlineFilter.MIN_SAMPLES = 1;\n\n/**\n * The maximum number of samples for rendering outline.\n * @static\n * @member {number} MAX_SAMPLES\n * @memberof PIXI.filters.OutlineFilter\n * @default 100\n */\nOutlineFilter.MAX_SAMPLES = 100;\n"],"names":["OutlineFilter","thickness","color","quality","const","samples","Math","max","MAX_SAMPLES","MIN_SAMPLES","angleStep","PI","toFixed","super","vertex","fragment","replace","this","uniforms","Float32Array","outlineColor","apply","filterManager","input","output","clear","size","width","height","applyFilter","prototypeAccessors","PIXI.utils","rgb2hex","value","hex2rgb","PIXI.Filter"],"mappings":";;;;;;;0qCAqBqBA,0BAEjB,WAAYC,EAAeC,EAAkBC,kBAArB,kBAAW,kBAAoB,IACnDC,IAAMC,EAAWC,KAAKC,IAClBJ,EAAUH,EAAcQ,YACxBR,EAAcS,aAEZC,GAAuB,EAAVJ,KAAKK,GAASN,GAASO,QAAQ,GAElDC,YAAMC,OAAQC,SAASC,QAAQ,kBAAmBN,IAClDO,KAAKC,SAASjB,UAAY,IAAIkB,cAAc,EAAG,IAO/CF,KAAKhB,UAAYA,EAEjBgB,KAAKC,SAASE,aAAe,IAAID,cAAc,EAAG,EAAG,EAAG,IACxDF,KAAKf,MAAQA,EAEbe,KAAKd,QAAUA,4IAGnBkB,eAAMC,EAAeC,EAAOC,EAAQC,GAChCR,KAAKC,SAASjB,UAAU,GAAKgB,KAAKhB,UAAYsB,EAAMG,KAAKC,MACzDV,KAAKC,SAASjB,UAAU,GAAKgB,KAAKhB,UAAYsB,EAAMG,KAAKE,OAEzDN,EAAcO,YAAYZ,KAAMM,EAAOC,EAAQC,IAQnDK,EAAI5B,qBACA,OAAO6B,MAAWC,QAAQf,KAAKC,SAASE,eAE5CU,EAAI5B,mBAAM+B,GACNF,MAAWG,QAAQD,EAAOhB,KAAKC,SAASE,yDAzCLe,QAoD3CnC,cAAcS,YAAc,EAS5BT,cAAcQ,YAAc"}