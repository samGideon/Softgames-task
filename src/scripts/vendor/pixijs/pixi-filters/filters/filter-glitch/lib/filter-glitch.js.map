{"version":3,"file":"filter-glitch.js","sources":["../src/GlitchFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './glitch.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The GlitchFilter applies a glitch effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/glitch.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {object} [options] - The more optional parameters of the filter.\n * @param {number} [options.slices=5] - The maximum number of slices.\n * @param {number} [options.offset=100] - The maximum offset amount of slices.\n * @param {number} [options.direction=0] - The angle in degree of the offset of slices.\n * @param {number} [options.fillMode=0] - The fill mode of the space after the offset. Acceptable values:\n *  - `0` {@link PIXI.filters.GlitchFilter.TRANSPARENT TRANSPARENT}\n *  - `1` {@link PIXI.filters.GlitchFilter.ORIGINAL ORIGINAL}\n *  - `2` {@link PIXI.filters.GlitchFilter.LOOP LOOP}\n *  - `3` {@link PIXI.filters.GlitchFilter.CLAMP CLAMP}\n *  - `4` {@link PIXI.filters.GlitchFilter.MIRROR MIRROR}\n * @param {number} [options.seed=0] - A seed value for randomizing glitch effect.\n * @param {number} [options.average=false] - `true` will divide the bands roughly based on equal amounts\n *                 where as setting to `false` will vary the band sizes dramatically (more random looking).\n * @param {number} [options.minSize=8] - Minimum size of individual slice. Segment of total `sampleSize`\n * @param {number} [options.sampleSize=512] - The resolution of the displacement map texture.\n * @param {number} [options.red=[0,0]] - Red channel offset\n * @param {number} [options.green=[0,0]] - Green channel offset.\n * @param {number} [options.blue=[0,0]] - Blue channel offset.\n */\nexport default class GlitchFilter extends PIXI.Filter {\n\n    constructor(options = {}) {\n\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        options = Object.assign({\n            slices: 5,\n            offset: 100,\n            direction: 0,\n            fillMode: 0,\n            average: false,\n            seed: 0,\n            red: [0, 0],\n            green: [0, 0],\n            blue: [0, 0],\n            minSize: 8,\n            sampleSize: 512,\n        }, options);\n\n        this.direction = options.direction;\n        this.red = options.red;\n        this.green = options.green;\n        this.blue = options.blue;\n\n        /**\n         * The maximum offset value for each of the slices.\n         *\n         * @member {number}\n         */\n        this.offset = options.offset;\n\n        /**\n         * The fill mode of the space after the offset.\n         *\n         * @member {number}\n         */\n        this.fillMode = options.fillMode;\n\n        /**\n         * `true` will divide the bands roughly based on equal amounts\n         * where as setting to `false` will vary the band sizes dramatically (more random looking).\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.average = options.average;\n\n        /**\n         * A seed value for randomizing color offset. Animating\n         * this value to `Math.random()` produces a twitching effect.\n         *\n         * @member {number}\n         */\n        this.seed = options.seed;\n\n        /**\n         * Minimum size of slices as a portion of the `sampleSize`\n         *\n         * @member {number}\n         */\n        this.minSize = options.minSize;\n\n        /**\n         * Height of the displacement map canvas.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.sampleSize = options.sampleSize;\n\n        /**\n         * Internally generated canvas.\n         *\n         * @member {HTMLCanvasElement} _canvas\n         * @private\n         */\n        this._canvas = document.createElement('canvas');\n        this._canvas.width = 4;\n        this._canvas.height = this.sampleSize;\n\n        /**\n         * The displacement map is used to generate the bands.\n         * If using your own texture, `slices` will be ignored.\n         *\n         * @member {PIXI.Texture}\n         * @readonly\n         */\n        this.texture = PIXI.Texture.fromCanvas(this._canvas, PIXI.SCALE_MODES.NEAREST);\n\n        /**\n         * Internal number of slices\n         * @member {number}\n         * @private\n         */\n        this._slices = 0;\n\n        // Set slices\n        this.slices = options.slices;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n\n        const width = input.sourceFrame.width;\n        const height = input.sourceFrame.height;\n\n        this.uniforms.dimensions[0] = width;\n        this.uniforms.dimensions[1] = height;\n        this.uniforms.aspect = height / width;\n\n        this.uniforms.seed = this.seed;\n        this.uniforms.offset = this.offset;\n        this.uniforms.fillMode = this.fillMode;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Randomize the slices size (heights).\n     *\n     * @private\n     */\n    _randomizeSizes() {\n        const arr = this._sizes;\n        const last = this._slices - 1;\n        const size = this.sampleSize;\n        const min = Math.min(this.minSize / size, 0.9 / this._slices);\n\n        if (this.average) {\n            const count = this._slices;\n            let rest = 1;\n\n            for (let i = 0; i < last; i++) {\n                const averageWidth = rest / (count - i);\n                const w =  Math.max(averageWidth * (1 - Math.random() * 0.6), min);\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n        else {\n            let rest = 1;\n            const ratio = Math.sqrt(1 / this._slices);\n\n            for (let i = 0; i < last; i++) {\n                const w = Math.max(ratio * rest * Math.random(), min);\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n\n        this.shuffle();\n    }\n\n    /**\n     * Shuffle the sizes of the slices, advanced usage.\n     */\n    shuffle() {\n        const arr = this._sizes;\n        const last = this._slices - 1;\n\n        // shuffle\n        for (let i = last; i > 0; i--) {\n            const rand = (Math.random() * i) >> 0;\n            const temp = arr[i];\n\n            arr[i] = arr[rand];\n            arr[rand] = temp;\n        }\n    }\n\n    /**\n     * Randomize the values for offset from -1 to 1\n     *\n     * @private\n     */\n    _randomizeOffsets() {\n        for (let i = 0 ; i < this._slices; i++) {\n            this._offsets[i] = Math.random() * (Math.random() < 0.5 ? -1 : 1);\n        }\n    }\n\n    /**\n     * Regenerating random size, offsets for slices.\n     */\n    refresh() {\n        this._randomizeSizes();\n        this._randomizeOffsets();\n        this.redraw();\n    }\n\n    /**\n     * Redraw displacement bitmap texture, advanced usage.\n     */\n    redraw() {\n        const size = this.sampleSize;\n        const texture = this.texture;\n        const ctx = this._canvas.getContext('2d');\n        ctx.clearRect(0, 0, 8, size);\n\n        let offset;\n        let y = 0;\n\n        for (let i = 0 ; i < this._slices; i++) {\n            offset = Math.floor(this._offsets[i] * 256);\n            const height = this._sizes[i] * size;\n            const red = offset > 0 ? offset : 0;\n            const green = offset < 0 ? -offset : 0;\n            ctx.fillStyle = 'rgba(' + red + ', ' + green + ', 0, 1)';\n            ctx.fillRect(0, y >> 0, size, height + 1 >> 0);\n            y += height;\n        }\n\n        texture.baseTexture.emit('update', texture.baseTexture);\n        this.uniforms.displacementMap = texture;\n    }\n\n    /**\n     * Manually custom slices size (height) of displacement bitmap\n     *\n     * @member {number[]}\n     */\n    set sizes(sizes) {\n        const len = Math.min(this._slices, sizes.length);\n\n        for (let i = 0; i < len; i++){\n            this._sizes[i] = sizes[i];\n        }\n    }\n    get sizes() {\n        return this._sizes;\n    }\n\n    /**\n     * Manually set custom slices offset of displacement bitmap, this is\n     * a collection of values from -1 to 1. To change the max offset value\n     * set `offset`.\n     *\n     * @member {number[]}\n     */\n    set offsets(offsets) {\n        const len = Math.min(this._slices, offsets.length);\n\n        for (let i = 0; i < len; i++){\n            this._offsets[i] = offsets[i];\n        }\n    }\n    get offsets() {\n        return this._offsets;\n    }\n\n    /**\n     * The count of slices.\n     * @member {number}\n     * @default 5\n     */\n    get slices() {\n        return this._slices;\n    }\n    set slices(value) {\n        if (this._slices === value) {\n            return;\n        }\n        this._slices = value;\n        this.uniforms.slices = value;\n        this._sizes = this.uniforms.slicesWidth = new Float32Array(value);\n        this._offsets = this.uniforms.slicesOffset = new Float32Array(value);\n        this.refresh();\n    }\n\n    /**\n     * The angle in degree of the offset of slices.\n     * @member {number}\n     * @default 0\n     */\n    get direction() {\n        return this._direction;\n    }\n    set direction(value) {\n        if (this._direction === value) {\n            return;\n        }\n        this._direction = value;\n\n        const radians = value * PIXI.DEG_TO_RAD;\n\n        this.uniforms.sinDir = Math.sin(radians);\n        this.uniforms.cosDir = Math.cos(radians);\n    }\n\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get red() {\n        return this.uniforms.red;\n    }\n    set red(value) {\n        this.uniforms.red = value;\n    }\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get green() {\n        return this.uniforms.green;\n    }\n    set green(value) {\n        this.uniforms.green = value;\n    }\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get blue() {\n        return this.uniforms.blue;\n    }\n    set blue(value) {\n        this.uniforms.blue = value;\n    }\n\n    /**\n     * Removes all references\n     */\n    destroy() {\n        this.texture.destroy(true);\n        this.texture = null;\n        this._canvas = null;\n        this.red = null;\n        this.green = null;\n        this.blue = null;\n        this._sizes = null;\n        this._offsets = null;\n    }\n}\n\n/**\n * Fill mode as transparent\n *\n * @constant\n * @static\n * @member {int} TRANSPARENT\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.TRANSPARENT = 0;\n\n/**\n * Fill mode as original\n *\n * @constant\n * @static\n * @member {int} ORIGINAL\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.ORIGINAL = 1;\n\n/**\n * Fill mode as loop\n *\n * @constant\n * @static\n * @member {int} LOOP\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.LOOP = 2;\n\n/**\n * Fill mode as clamp\n *\n * @constant\n * @static\n * @member {int} CLAMP\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.CLAMP = 3;\n\n/**\n * Fill mode as mirror\n *\n * @constant\n * @static\n * @member {int} MIRROR\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.MIRROR = 4;\n"],"names":["GlitchFilter","options","super","vertex","fragment","this","uniforms","dimensions","Float32Array","Object","assign","slices","offset","direction","fillMode","average","seed","red","green","blue","minSize","sampleSize","_canvas","document","createElement","width","height","texture","PIXI.Texture","fromCanvas","PIXI.SCALE_MODES","NEAREST","_slices","apply","filterManager","input","output","clear","const","sourceFrame","aspect","applyFilter","_randomizeSizes","arr","_sizes","last","size","min","Math","count","rest","i","averageWidth","w","max","random","let","ratio","sqrt","shuffle","rand","temp","_randomizeOffsets","_offsets","refresh","redraw","ctx","getContext","clearRect","y","floor","fillStyle","fillRect","baseTexture","emit","displacementMap","prototypeAccessors","sizes","len","length","offsets","value","slicesWidth","slicesOffset","_direction","radians","PIXI.DEG_TO_RAD","sinDir","sin","cosDir","cos","destroy","PIXI.Filter","TRANSPARENT","ORIGINAL","LOOP","CLAMP","MIRROR"],"mappings":"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"}